const { log } = require('console');
const fs = require('fs');
const http = require('http');
const path = require('path');
const url = require('url');

// Function to replace template variables with actual product data
const replaceTemplate = (temp, product) => {
    let output = temp.replace(/{%PRODUCTNAME%}/g, product.productName);
    output = output.replace(/{%IMAGE%}/g, product.image);
    output = output.replace(/{%PRICE%}/g, product.price);
    output = output.replace(/{%FROM%}/g, product.from);
    output = output.replace(/{%NUTRIENTS%}/g, product.nutrients);
    output = output.replace(/{%QUANTITY%}/g, product.quantity);
    output = output.replace(/{%DESCRIPTION%}/g, product.description);
    output = output.replace(/{%ID%}/g, product.id);

    if (!product.organic) output = output.replace(/{%NOT_ORGANIC%}/g, 'not-organic');

    return output;
};

// Read templates and data files as strings
const tempOverview = fs.readFileSync(`${__dirname}/templates/template-overview.html`, 'utf-8');
const tempCard = fs.readFileSync(`${__dirname}/templates/template-card.html`, 'utf-8');
const tempProduct = fs.readFileSync(`${__dirname}/templates/template-product.html`, 'utf-8');

const data = fs.readFileSync(`${__dirname}/dev-data/data.json`, 'utf-8');
const dataObj = JSON.parse(data);

// Create server
const server = http.createServer((req, resp) => {
    const { pathname, query } = url.parse(req.url, true);

    // Overview page
    if (pathname === '/' || pathname === '/overview') {
        resp.writeHead(200, { 'Content-type': 'text/html' });

        const cardsHtml = dataObj.map(el => replaceTemplate(tempCard, el)).join('');
        const output = tempOverview.replace('{%PRODUCT_CARDS%}', cardsHtml);

        resp.end(output);

    // Product page
    } else if (pathname === '/product') {
        const product = dataObj[query.id];
        if (product) {
            const output = replaceTemplate(tempProduct, product);
            resp.writeHead(200, { 'Content-type': 'text/html' });
            resp.end(output);
        } else {
            resp.writeHead(404, { 'Content-type': 'text/html' });
            resp.end('<h1>Product not found!</h1>');
        }

    // API
    } else if (pathname === '/api') {
        resp.writeHead(200, { 'Content-type': 'application/json' });
        resp.end(data);

    // Not Found
    } else {
        resp.writeHead(404, { 'Content-type': 'text/html' });
        resp.end('<h1>Page not found!</h1>');
    }
});

server.listen(8000, '127.0.0.1', () => {
    log("Listening for requests on port 8000");
});
